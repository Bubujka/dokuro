#!/bin/bash
# vim: tabstop=4:softtabstop=4:shiftwidth=4:noexpandtab

red_echo() {
	echo -e "\e[1;31m$@\e[0m"
}

green_echo() {
	echo -e "\e[1;32m$@\e[0m"
}

_clear_all_prj_configs() {
	rm /etc/nginx/prj-include/*
	rm /etc/nginx/sites-enabled/*
	rm /etc/php5/fpm/pool.d/*
}

_remove_default_pool() {
	rm /etc/php5/fpm/pool.d/www.conf
}

_chown_php_configs() {
	touch /var/log/php5-fpm.log
	touch /var/log/php5-fpm-slow.log
	chown vagrant:vagrant /var/log/php5-fpm.log
	chown vagrant:vagrant /var/log/php5-fpm-slow.log
}

_run_install_script() {
	NAME=$1
	cd /vagrant/prj/$NAME
	if [ -f ./watch ] ; then
		green_echo " - running ./install"
		sudo -u vagrant ./install 2>&1 | sed 's/^/   ... /'
	fi
}

_init_all_projects() {
	cd /vagrant/prj
	for NAME in * ; do
		green_echo "Creating configs for $NAME"
		_create_php_pool_config $NAME
		_create_nginx_config $NAME
		_create_mysql_database_and_fill_it $NAME
		_run_install_script $NAME
		_check_cname_exists $NAME
	done
}

_check_cname_exists() {
	NAME=$1
	if [ ! -f /vagrant/prj/$NAME/CNAME ] ; then
		red_echo ' - project doesn`t have CNAME file'
	fi
}

_create_mysql_database_and_fill_it() {
	NAME=$1
	green_echo " - creating mysql database"
	echo "drop database if exists \`$NAME\`" | mysql -uroot -pvagrant
	echo "create database \`$NAME\` character set utf8" | mysql -uroot -pvagrant
	if [ -f /vagrant/prj/$NAME/dump.sql ] ; then
		green_echo " - restoring dump.sql"
		cat /vagrant/prj/$NAME/dump.sql | mysql $NAME
	fi
	if [ -f /vagrant/prj/$NAME/dump.sql.gz ] ; then
		green_echo " - restoring dump.sql.gz"
		cat /vagrant/prj/$NAME/dump.sql.gz | gunzip | mysql $NAME
	fi
}

_create_nginx_config() {
	NAME=$1
	if [ -f /vagrant/prj/$NAME/nginx.conf ] ; then
		green_echo " - creating nginx config"
		cp /vagrant/prj/$NAME/nginx.conf /etc/nginx/prj-include/$NAME

		ROOT_DIR="/vagrant/prj/$NAME"
		if [ -d /vagrant/prj/$NAME/www ]; then
			ROOT_DIR="/vagrant/prj/$NAME/www"
		fi
		cat <<- EOF > /etc/nginx/sites-enabled/$NAME
			server {
				listen *:80;
				server_name $NAME.dokuro.ru;
				set \$php_pool unix:/var/run/php5-fpm-$NAME.sock;
				root $ROOT_DIR;
				location /.git { deny   all; }
				include /etc/nginx/prj-include/$NAME;
			}
			EOF
		chown vagrant:vagrant /etc/nginx/sites-enabled/$NAME
	else
		red_echo ' - project doesn`t have nginx.conf'
	fi
}

_create_php_pool_config() {
	green_echo " - creating php pool"
	NAME=$1
	cat <<- EOF > /etc/php5/fpm/pool.d/$NAME.conf
		[$NAME]
		user = vagrant
		group = vagrant
		listen = /var/run/php5-fpm-$NAME.sock
		pm = dynamic
		pm.max_children = 5
		pm.start_servers = 2
		pm.min_spare_servers = 1
		pm.max_spare_servers = 3
		pm.max_requests = 500
		;pm.status_path = /status
		;ping.path = /ping
		;access.log = log/\$pool.access.log
		slowlog = /var/log/php5-fpm-slow.log
		request_slowlog_timeout = 10
		request_terminate_timeout = 20
		;chroot =
		chdir = /
		catch_workers_output = yes
		env[MYSQL_DATABASE]='mysql://root:vagrant@localhost/$NAME'
		php_value[session.save_path]=/tmp
		EOF
}

_install_helper_software() {
	apt-get -y install nfs-common portmap htop git curl screen
}

_restart_all_servers() {
	green_echo "Restarting all servers"
	service php5-fpm restart 2>&1 | sed 's/^/ ... /'
	service mysql restart 2>&1 | sed 's/^/ ... /'
	service nginx restart 2>&1 | sed 's/^/ ... /'
}

_install_nginx() {
	apt-get -y install nginx
}

_basic_configure_nginx() {
	sed -i 's/sendfile on/sendfile off/g' /etc/nginx/nginx.conf
	mkdir /etc/nginx/prj-include
	cat > /etc/nginx/conf.d/dullhost.conf <<- EOF
		server_names_hash_bucket_size 256;
		log_format php  '\$status \$upstream_response_time \$http_host "\$request" '
		'\$bytes_sent '
		'"\$http_referer" - \$remote_addr - \$remote_user - "\$http_user_agent" '
		'\$request_time [\$time_local]';
		access_log off;
		EOF
}

_write_php_location_for_nginx() {
	cat > /etc/nginx/php_fastcgi <<- EOF
		location ~ \.php$ {
			access_log  /var/log/nginx/access.log php;
			fastcgi_pass   \$php_pool;
			fastcgi_index  index.php;
			fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
			fastcgi_param  REDIRECT_QUERY_STRING     \$query_string;
			include        fastcgi_params;
		}
		EOF

	cat > /etc/nginx/php_fastcgi_internal <<- EOF
		location ~ \.php$ {
			internal;
			access_log  /var/log/nginx/access.log php;
			fastcgi_pass   \$php_pool;
			fastcgi_index  index.php;
			fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
			fastcgi_param  REDIRECT_QUERY_STRING     \$query_string;
			include        fastcgi_params;
		}
		EOF
}

_enable_xdebug_profile() {
	echo 'xdebug.profiler_enable_trigger=on' >> /etc/php5/conf.d/xdebug.ini
}

_install_composer() {
	curl -sS https://getcomposer.org/installer | php
	mv composer.phar /usr/local/bin/composer
}

_install_php() {
	apt-get -y install php5-mysql php5-fpm php5-curl php5-cli php5-xdebug php5-mcrypt
}

_update_apt() {
	apt-get update
}

_install_mysql() {
	debconf-set-selections <<< 'mysql-server-5.5 mysql-server/root_password password vagrant'
	debconf-set-selections <<< 'mysql-server-5.5 mysql-server/root_password_again password vagrant'
	apt-get -y install mysql-server mysql-client
}

_allow_mysql_connect_from_any_host() {
	mysql -uroot -pvagrant -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'vagrant' WITH GRANT OPTION; FLUSH PRIVILEGES;"
	sed -i 's/127\.0\.0\.1/0.0.0.0/g' /etc/mysql/my.cnf
}

_write_mysql_config_to_mycnf() {
	cat > ~/.my.cnf <<- EOL
		[client]
		host            = localhost
		user            = root
		password            = vagrant
		port            = 3306
		default_character_set = utf8
		
		[mysqldump]
		no-tablespaces
		EOL

	cat > /home/vagrant/.my.cnf <<- EOL
		[client]
		host            = localhost
		user            = root
		password            = vagrant
		port            = 3306
		default_character_set = utf8

		[mysqldump]
		no-tablespaces
		EOL
}

_install_dokuro_system_wide_on_vagrant() {
	wget https://raw2.github.com/Bubujka/dokuro/master/dokuro -O /usr/local/bin/dokuro
	chmod +x /usr/local/bin/dokuro
}

_install_ruby() {
	apt-get -y install rubygems
}

_install_compass() {
	gem install compass rb-fsevent rb-inotify
}

_stop_all_screen_sessions() {
	pkill screen
}

_run_watch_script() {
	NAME=$1
	cd /vagrant/prj/$NAME
	if [ -f ./watch ] ; then
		green_echo " - running ./watch"
		screen -m -d sudo -u vagrant ./watch
	fi
}

_print_all_sites_urls() {
	cd /vagrant/prj
	green_echo "Active projects:"
	for NAME in * ; do
		if [ -f $NAME/nginx.conf ] ; then
			green_echo " http://$NAME.dokuro.ru"
		fi
	done
}

__reload_all_projects() {
	_clear_all_prj_configs
	_stop_all_screen_sessions

	_init_all_projects

	_restart_all_servers

	_print_all_sites_urls
}

# Public commands
case "$1" in
	init)
		_update_apt

		_install_mysql
		_allow_mysql_connect_from_any_host
		_write_mysql_config_to_mycnf

		_install_php
		_remove_default_pool
		_chown_php_configs
		_enable_xdebug_profile
		_install_composer

		_install_nginx
		_basic_configure_nginx
		_write_php_location_for_nginx
		_install_helper_software

		_install_ruby
		_install_compass

		__reload_all_projects

		_install_dokuro_system_wide_on_vagrant
		;;

	reload)
		__reload_all_projects
		;;

	*)
		echo "Usage: dokuro <command> [options]"
		;;
esac
